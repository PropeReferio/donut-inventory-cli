#!/usr/bin/env python
import time
import datetime
import argparse

from constants import locations

import requests

def get_html(location):
	#TODO: add options for locations, using a dictionary
	try:
		r = requests.get(locations[location])
	except KeyError:
		print(f"\n\nlocation \"{location}\" is not a valid option. \n\nValid \
inputs for -l --location: \nfranklin\neast_nashville\nwest_nashville\n\
hillsboro\nponce_city_market\nwestside_provisions")
	except Exception as e:
		print(e)
	else:
		#To ensure that the page is loaded
		data = r.json()['data']
		names, high_prices, low_prices, availabilities = [], [], [], []
		for i in data:
			names.append(i['name'])
			high_prices.append(i['price']['high_formatted'])
			low_prices.append(i['price']['low_formatted'])
			stock = i['badges']
			if stock['low_stock']:
				availabilities.append('Low Stock')
			elif stock['out_of_stock']:
				availabilities.append('Out of Stock')
			else:
				availabilities.append('')
		if low_prices != high_prices:
			print("Low and high prices data are not the same!!!")
		return names, availabilities, high_prices

def get_output(names, availabilities, prices, diet):
	output = str(datetime.datetime.now().strftime("%d %B %Y, %H:%M")) + '\n\n'
	for i in range(len(names)):
		if all([diet in names[i], not 'Tee' in names[i], 
		not 'Hoodie' in names[i], not 'Onesie' in names[i],
		not 'Hat' in names[i]]):
			if availabilities[i]:
				output += f"{prices[i].strip() : <6} |  {names[i].strip() : <48}  |  {availabilities[i].strip()} \n"
			else:
				output += f"{prices[i].strip() : <6} |  {names[i].strip() : <48} \n"

	return output

def Main():
	parser = argparse.ArgumentParser()
	diet_group = parser.add_mutually_exclusive_group(required=True)
	diet_group.add_argument("-o", "--omni", help="Shows availability of all \
		food and drinks.", action="store_true")
	diet_group.add_argument("-p", "--paleo", help="Shows availability of paleo \
		donuts.", action="store_true")
	diet_group.add_argument("-v", "--vegan", help="Shows availability of vegan \
		donuts.", action="store_true")
	parser.add_argument("-f", "--file", help="Filename to write output to.",
	type=str)
	parser.add_argument("-l", "--location", help="The store location to get \
		inventory from. \nValid Choices:\n\nfranklin\neast_nashville\n\
		west_nashville\nhillsboro\nponce_city_market\nwestside_provisions", 
		type=str, required=True)

	args = parser.parse_args()

	names, availabilities, prices = get_html(args.location)
	if args.omni:
		print("Showing all food and drinks: ")
		output = get_output(names, availabilities, prices, '')
	elif args.paleo:
		print("Showing paleo donuts only: ")
		output = get_output(names, availabilities, prices, 'Paleo')
	elif args.vegan:
		print("Showing vegan donuts only: ")
		output = get_output(names, availabilities, prices, 'Vegan')
	
	print(output)

	if args.file:
		with open(args.file, "a") as f:
			f.write(output)

if __name__ == "__main__":
	Main()